# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "minitest/autorun"
require "minitest/spec"

require "google/gax"

require "google/cloud/vision"
require "google/cloud/vision/<%= version %>/helpers"

require "google/cloud/vision/<%= version %>/image_annotator_client"
require "google/cloud/vision/<%= version %>/product_search_client"

class HelperMockImageAnnotatorCredentials_<%= version %> < Google::Cloud::Vision::<%= version.capitalize %>::Credentials
  def initialize method_name
    @method_name = method_name
  end

  def updater_proc
    proc do
      raise "The method `#{@method_name}` was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

class HelperMockProductSearchCredentials_<%= version %> < Google::Cloud::Vision::<%= version.capitalize %>::Credentials
  def initialize
  end

  def updater_proc
    proc do
      raise "The client was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

describe Google::Cloud::Vision::<%= version.capitalize %>::ImageAnnotatorClient do
  let(:helper_methods) do
    helper_hash = {}
    Google::Cloud::Vision::<%= version %>::Feature::Type.constants.each do |feature_type|
      next if feature_type == :TYPE_UNSPECIFIED
      method_name = feature_type.to_s.downcase
      method_name += "_detection" unless method_name.include? "detection"
      helper_hash[method_name] = feature_type
    end
    helper_hash
  end
  let(:image_uri) { "http://example.com/face.jpg" }
  let(:gcs_image_uri) { "gs://gapic-toolkit/President_Barack_Obama.jpg" }
  let(:mock_credentials) { HelperMockImageAnnotatorCredentials_<%= version %>.new("batch_annotate_images") }

  def image_object image
    return { content: image.binmode.read } if image.respond_to? :binmode
    return { content: File.binread(image) } if File.file? image
    return { source: { image_uri: image_uri } } if image == image_uri
    { source: { gcs_image_uri: gcs_image_uri } }
  end

  def batch_annotate_stub image, feature_type
    feature = { type: feature_type, max_results: 10 }
    expected_requests =
      if image.is_a? Array
        (0...image.size).map do |n|
          {
            image: image_object(image[n]),
            features: [feature]
          }
        end
      else
        [{
          image: image_object(image),
          features: [feature]
        }]
      end
    proc do |requests|
      assert_equal(expected_requests, requests)
    end
  end

  def async_annotate_stub image, feature_type, destination
    feature = { type: feature_type, max_results: 10 }
    input_config = {
      gcs_source: {
        uri: image_object(image)[:source][:gcs_image_uri]
      }
    }
    input_config[:mime_type] = "application/pdf"
    expected_requests = [
      {
        input_config: input_config,
        features: [feature],
        output_config: {
          gcs_destination: {
            uri: destination
          },
          batch_size: 10
        }
      }
    ]
    proc do |requests|
      assert_equal(expected_requests, requests)
    end
  end

<%= 
  describe_block = []
  helper_hash.sort.each do |method_name, feature_type|
    describe_block += ["describe \"#{method_name}\" do"]
    {
      "single image file": 'File.new("acceptance/data/face.jpg", "r")',
      "list of image files": '(0..1).map { File.new("acceptance/data/face.jpg", "r") }',
      "single io object": 'IO.new((IO.sysopen("acceptance/data/face.jpg", "r")), "rb")',
      "list of io objects": '(0..1).map { IO.new((IO.sysopen("acceptance/data/face.jpg", "r")), "rb") }',
      "single image path": '"acceptance/data/face.jpg"',
      "list of image paths": '(0..1).map { "acceptance/data/face.jpg" }',
      "single image uri": '"http://example.com/face.jpg"',
      "list of image uri's": '(0..1).map { "http://example.com/face.jpg" }',
      "single gcs image uri": '"gs://gapic-toolkit/President_Barack_Obama.jpg"',
      "list of gcs image uri's": '(0..1).map { "gs://gapic-toolkit/President_Barack_Obama.jpg" }'
    }.sort.each do |description, image|
      describe_block += [
        "  it \"correctly calls batch_annotate_images when given a #{description}\" do",
        "    Google::Cloud::Vision::#{version.capitalize}::Credentials.stub(:default, mock_credentials) do",
        "      client = Google::Cloud::Vision::ImageAnnotator.new version: :#{version}",
        "      stub = batch_annotate_stub #{image}, :#{feature_type}",
        "      client.stub(:batch_annotate_images, stub) do"
      ]
      if description.to_s.include? "list"
        describe_block << "        client.#{method_name} images: #{image}"
      else
        describe_block << "        client.#{method_name} image: #{image}"
      end 
      describe_block += [
        "      end",
        "    end",
        "  end",
        ""
      ]
    end

    describe_block += [
      "  it \"correctly calls async_batch_annotate_files when async is true\" do",
      "    Google::Cloud::Vision::#{version.capitalize}::Credentials.stub(:default, mock_credentials) do",
      "      client = Google::Cloud::Vision::ImageAnnotator.new version: :#{version}",
      "      stub = async_annotate_stub gcs_image_uri, :#{feature_type}, \"gs://my-bucket\"",
      "      client.stub(:async_batch_annotate_files, stub) do",
      "       client.#{method_name}" + "(",
      "          image: gcs_image_uri,",
      "          destination: \"gs://my-bucket\",",
      "          async: true,",
      "          mime_type: \"application/pdf\"",
      "        )",
      "      end",
      "    end",
      "  end",
      "end",
      ""
    ]
  end
  describe_block.pop
  describe_block.map { |line| "  " + line unless line.size == 0 }.join("\n")
%>
end

describe Google::Cloud::Vision::<%= version.capitalize %>::ProductSearchClient do
  let(:mock_credentials) { HelperMockProductSearchCredentials_<%= version %>.new }
 <%= 
  describe_block = []
  class_methods.each do |method_name| 
    describe_block += ["describe \"the #{method_name} instance method\" do"]
     describe_block += [
      "  it \"correctly calls Google::Cloud::Vision::#{version.capitalize}::ProductSearchClient.#{method_name}\" do",
      "    Google::Cloud::Vision::#{version.capitalize}::Credentials.stub(:default, mock_credentials) do",
      "      parameters = Google::Cloud::Vision::#{version.capitalize}::ProductSearchClient.method(\"#{method_name}\").parameters.map { |arg| arg.last.to_s }",
      "      client = Google::Cloud::Vision::ProductSearch.new version: :#{version}",
      "      assert_equal(",
      "        client.#{method_name}(*parameters),",
      "        Google::Cloud::Vision::#{version.capitalize}::ProductSearchClient.#{method_name}(*parameters)",
      "      )",
      "    end",
      "  end",
      "end",
      ""
    ]
  end
  describe_block.map { |line| "  " + line unless line.size == 0 }.join("\n")[0...-1]
%>
end