# Copyright 2018 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/setup"
require "bundler/gem_tasks"

require "rubocop/rake_task"
RuboCop::RakeTask.new

desc "Run tests."
task :test do
  $LOAD_PATH.unshift "lib", "test"
  Dir.glob("test/**/*test.rb")
    .reject { |file| file.include? "smoke_test" }
    .each { |file| require_relative file }
end

namespace :test do
  desc "Runs tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google-cloud-vision"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task["test"].invoke
  end
end

desc "Runs the smoke tests."
task :smoke_test do

  $LOAD_PATH.unshift "lib", "smoke_test"
  Dir.glob("acceptance/**/*smoke_test.rb").each { |file| require_relative file }
end

namespace :smoke_test do
  desc "Runs smoke tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google-cloud-vision"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task["smoke_test"].invoke
  end
end

# Acceptance tests
desc "Run the google-cloud-vision acceptance tests."
task :acceptance, :project, :keyfile do |t, args|
  project = args[:project]
  project ||=
    ENV["VISION_TEST_PROJECT"] ||
    ENV["GCLOUD_TEST_PROJECT"]
  keyfile = args[:keyfile]
  keyfile ||=
    ENV["VISION_TEST_KEYFILE"] ||
    ENV["GCLOUD_TEST_KEYFILE"]
  if keyfile
    keyfile = File.read keyfile
  else
    keyfile ||=
      ENV["VISION_TEST_KEYFILE_JSON"] ||
      ENV["GCLOUD_TEST_KEYFILE_JSON"]
  end
  if project.nil? || keyfile.nil?
    fail "You must provide a project and keyfile. e.g. rake acceptance[test123, /path/to/keyfile.json] or VISION_TEST_PROJECT=test123 VISION_TEST_KEYFILE=/path/to/keyfile.json rake acceptance"
  end
  require "google/cloud/vision/v1/credentials"
  (Google::Cloud::Vision::V1::Credentials::PATH_ENV_VARS +
   Google::Cloud::Vision::V1::Credentials::JSON_ENV_VARS).each do |path|
    ENV[path] = nil
  end
  ENV["VISION_PROJECT"] = project
  ENV["VISION_TEST_PROJECT"] = project
  ENV["VISION_KEYFILE_JSON"] = keyfile

  Rake::Task["acceptance:run"].invoke
end

namespace :acceptance do
  task :run do
    Rake::Task["smoke_test"].invoke
  end

  desc "Run acceptance tests with coverage."
  task :coverage do
  end

  desc "Run acceptance cleanup."
  task :cleanup do
  end
end

require "yard"
require "yard/rake/yardoc_task"
YARD::Rake::YardocTask.new

desc "Run yard-doctest example tests."
task :doctest do
  puts "The google-cloud-vision gem does not have doctest tests."
end

desc "Run the CI build"
task :ci do
  header "BUILDING google-cloud-vision"
  header "google-cloud-vision rubocop", "*"
  sh "bundle exec rake rubocop"
  header "google-cloud-vision doctest", "*"
  sh "bundle exec rake doctest"
  header "google-cloud-vision test", "*"
  sh "bundle exec rake test"
end

namespace :ci do
  desc "Run the CI build, with acceptance tests."
  task :acceptance do
    Rake::Task["ci"].invoke
    header "google-cloud-vision acceptance", "*"
    sh "bundle exec rake acceptance -v"
  end
  task :a do
    # This is a handy shortcut to save typing
    Rake::Task["ci:acceptance"].invoke
  end
end

task :generate_partials do
  require "google/cloud/vision"
  Google::Cloud::Vision::AVAILABLE_VERSIONS.each do |version|

    # Prepare ImageAnnotator helpers
    require "google/cloud/vision/#{version}/image_annotator_client"
    helper_hash = {}
    Google::Cloud::Vision.const_get(version.capitalize)::Feature::Type.constants.each do |feature_type|
      next if feature_type == :TYPE_UNSPECIFIED
      method_name = feature_type.to_s.downcase
      method_name += "_detection" unless method_name.include? "detection"
      helper_hash[method_name] = feature_type
    end
    
    # Prepare ProductSearch helpers
    require "google/cloud/vision/#{version}/product_search_client"
    class_methods = Google::Cloud::Vision.const_get(version.capitalize)::ProductSearchClient.methods false
    class_methods.sort!
    params = Hash[class_methods.collect { |method_name| [method_name, ""] } ]
    params.each do |method_name, _|
      args = Google::Cloud::Vision.const_get(version.capitalize)::ProductSearchClient.method(method_name).parameters
      params[method_name] = args.map { |arg| arg.last }
    end

    # Generate ImageAnnotator and ProductSearch helpers
    file_path = "./lib/google/cloud/vision/#{version}/helpers.rb"
    File.open(file_path, "w") do |f|
      config = ERB.new(File.read("./synth/helpers.rb.erb"))
      f.write(config.result(binding))
    end

    # Generate ImageAnnotator and ProductSearch tests
    file_path = "./test/google/cloud/vision/#{version}/helpers_test.rb"
    File.open(file_path, "w") do |f|
      config = ERB.new(File.read("./synth/helpers_test.rb.erb"))
      f.write(config.result(binding))
    end

    # Generate acceptance tests
    file_path = "./acceptance/google/cloud/vision/#{version}/helpers_smoke_test.rb"
    File.open(file_path, "w") do |f|
      config = ERB.new(File.read("./synth/helpers_smoke_test.rb.erb"))
      f.write(config.result(binding))
    end
  end
end

task :default => :test

def header str, token = "#"
  line_length = str.length + 8
  puts ""
  puts token * line_length
  puts "#{token * 3} #{str} #{token * 3}"
  puts token * line_length
  puts ""
end
